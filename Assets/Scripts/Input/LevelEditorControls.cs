//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/LevelEditorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LevelEditorControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LevelEditorControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LevelEditorControls"",
    ""maps"": [
        {
            ""name"": ""LevelEditorMap"",
            ""id"": ""4a47f5b6-d471-421d-809f-a7f2b984e83b"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""2cba49c4-6622-4e58-903b-41e034a35580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""88bae7fb-65b5-420d-84d9-9fedb3d9eca1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f15e9f03-24f3-4fac-a802-2cbd6835ab57"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f575d983-52fd-4644-b537-bddba44f8791"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LevelEditorMap
        m_LevelEditorMap = asset.FindActionMap("LevelEditorMap", throwIfNotFound: true);
        m_LevelEditorMap_Select = m_LevelEditorMap.FindAction("Select", throwIfNotFound: true);
        m_LevelEditorMap_Deselect = m_LevelEditorMap.FindAction("Deselect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LevelEditorMap
    private readonly InputActionMap m_LevelEditorMap;
    private ILevelEditorMapActions m_LevelEditorMapActionsCallbackInterface;
    private readonly InputAction m_LevelEditorMap_Select;
    private readonly InputAction m_LevelEditorMap_Deselect;
    public struct LevelEditorMapActions
    {
        private @LevelEditorControls m_Wrapper;
        public LevelEditorMapActions(@LevelEditorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_LevelEditorMap_Select;
        public InputAction @Deselect => m_Wrapper.m_LevelEditorMap_Deselect;
        public InputActionMap Get() { return m_Wrapper.m_LevelEditorMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelEditorMapActions set) { return set.Get(); }
        public void SetCallbacks(ILevelEditorMapActions instance)
        {
            if (m_Wrapper.m_LevelEditorMapActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_LevelEditorMapActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_LevelEditorMapActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_LevelEditorMapActionsCallbackInterface.OnSelect;
                @Deselect.started -= m_Wrapper.m_LevelEditorMapActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_LevelEditorMapActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_LevelEditorMapActionsCallbackInterface.OnDeselect;
            }
            m_Wrapper.m_LevelEditorMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
            }
        }
    }
    public LevelEditorMapActions @LevelEditorMap => new LevelEditorMapActions(this);
    public interface ILevelEditorMapActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
    }
}
