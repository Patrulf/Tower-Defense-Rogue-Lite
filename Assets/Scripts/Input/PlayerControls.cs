//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""72d9786b-2b0a-40c8-802b-075ba0b036c1"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""721b6abd-4959-4bdd-b4f4-3a23d18718d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""a17d4a9e-f2d9-45e7-93b4-ed4904a85d16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovementUp"",
                    ""type"": ""Button"",
                    ""id"": ""bfd6f4f9-9d07-4c78-86f8-e8bbd33db9c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovementDown"",
                    ""type"": ""Button"",
                    ""id"": ""8eb80589-28bb-4109-9e18-367386ee9d59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovementLeft"",
                    ""type"": ""Button"",
                    ""id"": ""deec6ddc-6a4f-4fa9-baa8-07770b91098f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovementRight"",
                    ""type"": ""Button"",
                    ""id"": ""94c7dcd3-f1d4-484c-9ef8-d36cf1271c86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""34fe03ee-def1-452b-850d-3c2c1965435a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a08ae42-0e7a-41b1-891e-654e9f3095de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be854582-bdf2-4f91-9cc1-7992250c3888"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23dea5d8-178a-458e-b902-aab681b4d0c5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac1efcd4-a38c-4767-852b-9853d9304c8f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4d7c6d4-0935-4afa-af48-84da43f58cca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa479624-088c-42e2-82e3-0e4a41390101"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""add54cc3-dfed-4d71-a855-85451dff5a55"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Select = m_PlayerMap.FindAction("Select", throwIfNotFound: true);
        m_PlayerMap_Drag = m_PlayerMap.FindAction("Drag", throwIfNotFound: true);
        m_PlayerMap_CameraMovementUp = m_PlayerMap.FindAction("CameraMovementUp", throwIfNotFound: true);
        m_PlayerMap_CameraMovementDown = m_PlayerMap.FindAction("CameraMovementDown", throwIfNotFound: true);
        m_PlayerMap_CameraMovementLeft = m_PlayerMap.FindAction("CameraMovementLeft", throwIfNotFound: true);
        m_PlayerMap_CameraMovementRight = m_PlayerMap.FindAction("CameraMovementRight", throwIfNotFound: true);
        m_PlayerMap_MousePosition = m_PlayerMap.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_Select;
    private readonly InputAction m_PlayerMap_Drag;
    private readonly InputAction m_PlayerMap_CameraMovementUp;
    private readonly InputAction m_PlayerMap_CameraMovementDown;
    private readonly InputAction m_PlayerMap_CameraMovementLeft;
    private readonly InputAction m_PlayerMap_CameraMovementRight;
    private readonly InputAction m_PlayerMap_MousePosition;
    public struct PlayerMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_PlayerMap_Select;
        public InputAction @Drag => m_Wrapper.m_PlayerMap_Drag;
        public InputAction @CameraMovementUp => m_Wrapper.m_PlayerMap_CameraMovementUp;
        public InputAction @CameraMovementDown => m_Wrapper.m_PlayerMap_CameraMovementDown;
        public InputAction @CameraMovementLeft => m_Wrapper.m_PlayerMap_CameraMovementLeft;
        public InputAction @CameraMovementRight => m_Wrapper.m_PlayerMap_CameraMovementRight;
        public InputAction @MousePosition => m_Wrapper.m_PlayerMap_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnSelect;
                @Drag.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnDrag;
                @CameraMovementUp.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementUp;
                @CameraMovementUp.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementUp;
                @CameraMovementUp.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementUp;
                @CameraMovementDown.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementDown;
                @CameraMovementDown.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementDown;
                @CameraMovementDown.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementDown;
                @CameraMovementLeft.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementLeft;
                @CameraMovementLeft.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementLeft;
                @CameraMovementLeft.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementLeft;
                @CameraMovementRight.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementRight;
                @CameraMovementRight.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementRight;
                @CameraMovementRight.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnCameraMovementRight;
                @MousePosition.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
                @CameraMovementUp.started += instance.OnCameraMovementUp;
                @CameraMovementUp.performed += instance.OnCameraMovementUp;
                @CameraMovementUp.canceled += instance.OnCameraMovementUp;
                @CameraMovementDown.started += instance.OnCameraMovementDown;
                @CameraMovementDown.performed += instance.OnCameraMovementDown;
                @CameraMovementDown.canceled += instance.OnCameraMovementDown;
                @CameraMovementLeft.started += instance.OnCameraMovementLeft;
                @CameraMovementLeft.performed += instance.OnCameraMovementLeft;
                @CameraMovementLeft.canceled += instance.OnCameraMovementLeft;
                @CameraMovementRight.started += instance.OnCameraMovementRight;
                @CameraMovementRight.performed += instance.OnCameraMovementRight;
                @CameraMovementRight.canceled += instance.OnCameraMovementRight;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    public interface IPlayerMapActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnCameraMovementUp(InputAction.CallbackContext context);
        void OnCameraMovementDown(InputAction.CallbackContext context);
        void OnCameraMovementLeft(InputAction.CallbackContext context);
        void OnCameraMovementRight(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
